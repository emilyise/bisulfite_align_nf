/*
 * -------------------------------------------------
 *            Nextflow config file
 * -------------------------------------------------
 */

// Global default params, used in configs
params {
  reads = null
  trimmed_reads = null
  bams = null
  bismark_index = null
  outdir = './results'

  rrbs = false
  nugen = false
  adapter1 = null
  adapter2 = null
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  min_insert = false
  truseq_epi = false
  single_cell = false
  comprehensive = false
  cytosine_report = false
  non_directional = false
  unmapped = false
  num_mismatches = false
  local_alignment = false
  bismark_align_cpu_per_multicore = null
  bismark_align_mem_per_multicore = null

  skip_fastqc = false
  skip_trim = false
  skip_align = false
  skip_dedup = false
  skip_extract = false

  tracedir = "./pipeline_info"

  custom_container = null

  help = false

  max_memory = 128.GB
  max_cpus = 16
  max_time = 28.d
}

process.container = 'rfchan/bisulfite_align'

manifest {
  name = 'robinfchan/bisulfite_align'
  author = 'Robin F. Chan'
  homePage = 'https://github.com/robinfchan/bisulfite_align'
  description = ''
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = 'dev'
}

// Update profiles, EGI
profiles {
    conda { 
        process.conda = "$baseDir/environment.yml" 
    }
    
    docker {
        docker.enabled = true
        fixOwnership = true
        runOptions = "-u \$(id -u):\$(id -g)"
    }

    singularity {
        singularity.enabled = true
        process.container = 'docker://rfchan/bisulfite_align'
        singularity.autoMounts = true // Ensures mounts work correctly
        singularity.runOptions = "--containall" // Restricts container access to mounted dirs
    }
}


// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
    // Add overwrite to trace EGI
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
  overwrite = true // EGI added
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {
  cpus = { check_max( 2 * task.attempt, 'cpus') }
  memory = { check_max( 16.GB * task.attempt, 'memory') }
  time = { check_max( 8.h * task.attempt, 'time') }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  withName:fastqc {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 16.GB * task.attempt, 'memory') }
    time = { check_max( 8.h * task.attempt, 'time') }
  }
  withName:trim_galore {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  withName:nugen_trim {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  withName:bismark_align {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 7.d * task.attempt, 'time') }
  }
  withName:bismark_deduplicate {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 7.d * task.attempt, 'time') }
  }
  withName:bismark_methXtract {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 7.d * task.attempt, 'time') }
  }
  withName:qualimap {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 16.GB * task.attempt, 'memory') }
    time = { check_max( 8.h * task.attempt, 'time') }
  }
  withName:preseq {
    errorStrategy = 'ignore'
  }
}
